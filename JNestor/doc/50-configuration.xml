<?xml version="1.0" encoding="UTF-8"?>
<!-- Here is the intro.xml file to be include inside book.xml -->
<!-- Note the word 'chapter' after DOCTYPE below.-->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" 
    "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
    
<chapter id="configuration">

<title>Configuring jNestor</title>

<para>
So you have downloaded the zip (or tgz) bundle, 
uncompressed it and now...what??</para>

<para>
The aim of this document is to explain the basics 
for make Jnestor to do what is designed for, and 
to suit into your particular case as smoothly as 
possible.
</para>

<para>
There is only one configuration file in JNestor: 
<filename>applicationContext.xml</filename>. If you 
know something about java programming, you should 
be aware that this file is in reality the configuration 
file for the beans of the application. I've decided
to put the configuration in that file because that 
allow me many advantages:
</para>

<itemizedlist>
<listitem>
<para>
I don't need to make code for the configuration 
of the application: Spring takes this duty for me, allowing 
me to concentrate on other tasks
</para>
</listitem>
<listitem>
<para>
I can easily configure things like cuustom actions 
by wiring them to the proper list of beans
</para>
</listitem>
<listitem>
<para>
Even the log information is stored in the 
<filename>applicationContext.xml</filename> file, 
making thus the unique configuration file for 
the whole application. You can forget of the 
hassle of having many configuration files
</para>
</listitem>
<listitem>
<para>
Saving a previous state of the configuration is easier: 
just make a copy of this file and you are done
</para>
</listitem>
</itemizedlist>


<caution>
<title>applicationContext, a blessing and a danger</title>
<para>
This model has also disadvantages: this file is and xml file, 
and because of this, any nuance can cause it to don't load 
properly. To prevent that cases, I strongly recommend to 
make copies of this file prior any important modification. 
</para>
</caution>

<note>
    <title>If you have reached this point...</title>
    <para>
	From time to time, in the configuration process, 
	you will come across with sections like this: in 
	this sections I will double-check the previous 
	configurations, just to be sure the previous 
	changes are working.   
    </para>
</note>

<sect2 id="avoid-something">
    <title>Avoid to do something you could lament</title>
    
    <para>
    Although the instruction I am giving here are for 
    the configuration with the minimum impact, I suggest 
    to take precautions in trying any new software. 
    </para>
    
    <para>
    So, the first thing we will do is to install a filter
    for the emails that JNestor will process. Only emails 
    with the subject <quote>yor-name</quote> or <quote>9778</quote>
    will be processed, the rest will be left untouched.
    </para>
    
    <para>
    In order to do so, open the 
    file <filename>applicationContext.xml</filename>
    and search for <userinput>filter.contains1</userinput>.
    You should find something like this: 
    </para>
    
    <para>
    <programlisting>
    &lt;!-- LEAVE BLANK THIS FILTER TO PROCESS ALL EMAILS --&gt;
    &lt;prop key="filter.contains1"&gt;.*9778.*&lt;/prop&gt;
    </programlisting>
    </para>
    
    <para>
    This is a filter who only will process the emails with
    the figures 9778 in the subject. While configuring 
    JNestor, put whatever you want in substitution of this 
    9778, and after the configuration, remove this. 
    </para>
    
    
</sect2>

<sect2>
    <title>Configure mantis access</title>

    <sect3>
        <title>Guess mantis API url</title>
        
        <para>
        Mantis url is something like this: 
        <filename>http://server/mantis/api/soap/mantisconnect.php</filename>. 
        Probably, in the release you have configured the development server
        I use, which is installed in <filename>localhost</filename>. Make the 
        proper changes in this url and put in the file.
        </para>
        
        <note>
        <title>If you have reached this point...</title>
        <para>
        Check that the url of mantis works: open a browser and point it 
        to the url you have made. You should see something like this: 
        
        </para>
		<screenshot>
		  <mediaobject>
		    <imageobject>
		      <imagedata fileref="images/50-01-mantis-api.png" format="PNG"  scalefit="1"/>
		    </imageobject>
		    <textobject>
		      <phrase>The API of mantis, in a browser</phrase>
		    </textobject>
		  </mediaobject>
		</screenshot>
        </note>   
    </sect3>
    
    <sect3>
        <title>In which project do you want the issues be entered??</title>
        
        <para>
        JNestor only can enter the new issues in a specific project in 
        Mantis. One mailbox, one project: if you have two projects, consider
        to have two mailboxes and two instances of JNestor running at 
        the same time. 
        </para>
        
        <para>
        To guess the project number, just enter into mantis and click on 
        <guimenu>Manage</guimenu> -&gt; <guimenuitem>Manage Projects</guimenuitem>. 
        The list of projects in Mantis should appear.
        </para>
        
        <para>
        Click on the project you want. In the address box of your browser, 
        you should see something like this: 
        <filename>http://localhost/mantis/manage_proj_edit_page.php?project_id=1</filename>.
        The number that comes after <computeroutput>project_id=</computeroutput>
        is the project number.
        </para>
        
        <tip>
        <para>
        If you are not the administrator, there are other ways to guess the 
        project number. If you try to move an issue (edit the issue and then click 
        on the button <guibutton>Move</guibutton>), you will see a list of 
        the available projects. Just see the source code of this page and 
        you will get a list of the projects with the respective id's.
        </para>
        </tip>

    </sect3>
    
    <sect3>
        <title>Create an user</title>    
    
        <para>
        You need a mantis who has permission to enter his own issues in mantis. 
        Everything in mantis is entered with an username, even the items put 
        through the <acronym>API</acronym>.
        </para>
        
        <para>
        To create a user for JNestor, just follow the following steps:
        </para>
        
        <orderedlist>
        <listitem>
        <para>
        Enter in mantis with administrative privileges and 
        <guimenu>manage</guimenu> -&gt; <guisubmenu>manage users</guisubmenu>
        </para>
        </listitem>
        <listitem>
        <para>
        Click on the <guibutton>create new account</guibutton> button
        </para>
        </listitem>
        <listitem>
        <para>
        And enter the data of the new account. For the purpose of this 
        manual, I've entered an username of <userinput>jnestor</userinput>, 
        the rest of the data is irrelevant. You have to enter a correct 
        email address because you have to reset the password afterwards. 
<screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/50-02-creating-user.png" format="PNG"  scalefit="1"/>
    </imageobject>
    <textobject>
      <phrase>Options screen of firefox</phrase>
    </textobject>
  </mediaobject>
</screenshot>

        </para>
        </listitem>
        <listitem>
        <para>
        You have to reset the password of this new user, but probably you are 
        familiarized with mantis enough to do so. Remember that mantis stays 
        on the reset password page after you have done it.
        </para>
        </listitem>
        </orderedlist>
        
    </sect3>
    
    <sect3>
        <title>Configure mantis access in JNestor</title>
    
        <para>
        
        </para>
    
    </sect3>

</sect2>

<sect2>
    <title>Configure email access</title>
    
    <para>
    Probably is the most complex part of this, because too many parameters 
    here, all of them inherited from JavaMail. If you work in a corporate 
    enviroment, and have access to the email administrator, is a good idea 
    to ask him (or her) what are the correct values here.
    </para>
    
    <para>
    If not, or if you are working with publicly available network accounts, 
    here is my advice: try to configure one email client (Thunderbird, Outlook). 
    If you succeed in this, you are almost done to configure JNestor.
    </para>
    

    
    <sect3>
    <title>Email configuration</title>
    
    <para>
    Email configuration is controlled via the following entries 
    in the <filename>applicationContex.xml</filename> filename
    (see below). We will going over these sections 
    </para>
    
    <programlisting>
 &lt;!-- 
 Example of secure mail configuration
  --&gt;
 &lt;!-- 
 &lt;prop key="mail.usessl"&gt;true&lt;/prop&gt;
 &lt;prop key="mail.user"&gt;jnestor.test&lt;/prop&gt;
 &lt;prop key="mail.password"&gt;superman_ha_muerto&lt;/prop&gt;
 &lt;prop key="mail.store.host"&gt;imap.gmail.com&lt;/prop&gt;
 &lt;prop key="mail.store.protocol"&gt;imap&lt;/prop&gt;
 &lt;prop key="mail.imap.port"&gt;993&lt;/prop&gt;
 &lt;prop key="mail.imap.socketFactory.port"&gt;993&lt;/prop&gt;
 &lt;prop key="mail.imap.socketFactory.class"&gt;javax.net.ssl.SSLSocketFactory&lt;/prop&gt;
 &lt;prop key="mail.store.inbox"&gt;INBOX&lt;/prop&gt;
  
 Thanks to http://magnuspo.wordpress.com/2008/05/30/javamail-secure-smtp/
 
 &lt;prop key="mail.smtp.host"&gt;smtp.googlemail.com&lt;/prop&gt;
 &lt;prop key="mail.smtp.port"&gt;465&lt;/prop&gt;
 &lt;prop key="mail.smtp.auth"&gt;true&lt;/prop&gt;
 &lt;prop key="mail.smtp.socketFactory.port"&gt;465&lt;/prop&gt;
 &lt;prop key="mail.smtp.socketFactory.class"&gt;javax.net.ssl.SSLSocketFactory&lt;/prop&gt;
 &lt;prop key="mail.smtp.socketFactory.fallback"&gt;false&lt;/prop&gt;
  --&gt;
 &lt;!-- 
 Example of insecure mail configuration
  --&gt;
 &lt;prop key="mail.usessl"&gt;false&lt;/prop&gt;
 &lt;prop key="mail.user"&gt;rluna&lt;/prop&gt;
 &lt;prop key="mail.password"&gt;dixfont67&lt;/prop&gt;
 &lt;prop key="mail.store.host"&gt;imap.arrakis.es&lt;/prop&gt;
 &lt;prop key="mail.store.protocol"&gt;imap&lt;/prop&gt;
 &lt;prop key="mail.imap.port"&gt;143&lt;/prop&gt;
 &lt;prop key="mail.store.inbox"&gt;INBOX&lt;/prop&gt;
 &lt;prop key="mail.smtp.host"&gt;smtp.arrakis.es&lt;/prop&gt;
 &lt;prop key="mail.smtp.port"&gt;587&lt;/prop&gt;
 &lt;!-- 
 What will be the maximum attachment size in bytes?
  --&gt;
 &lt;prop key="maximumAttachmentSize"&gt;15000000&lt;/prop&gt;    
    </programlisting>
    
    </sect3>

</sect2>

<sect2>
    <title>Logging configuration</title>
    
    <para>
    The configuration of logging of the application is located in the 
    file <filename>applicationContext.xml</filename>. As opposed to 
    other applications, that should have a working <filename>log4j.properties</filename>,
    here it is embedded into the application context.</para>
    
    <para>
    In the file <filename>applicationContext.xml</filename>, search 
    for <quote>loggerConfigurator</quote> and you will see something 
    like this:
    </para>
    
    <programlisting>
&lt;props&gt;
    &lt;!-- 
    root logger configuration: it will log all errors (including trace messages)
    and them will be directed to the logfile appender
     --&gt;
    &lt;prop key="log4j.rootLogger"&gt;ERROR, logfile&lt;/prop&gt;
    
    &lt;prop key="log4j.appender.logfile"&gt;org.apache.log4j.RollingFileAppender&lt;/prop&gt;
    &lt;prop key="log4j.appender.logfile.maxFilesize"&gt;1MB&lt;/prop&gt;
    &lt;prop key="log4j.appender.logfile.maxBackupIndex"&gt;9&lt;/prop&gt;
    &lt;prop key="log4j.appender.logfile.File"&gt;PUT-HERE-A-CORRECT-FILENAME.LOG&lt;/prop&gt;
    &lt;prop key="log4j.appender.logfile.layout"&gt;org.apache.log4j.PatternLayout&lt;/prop&gt;
    &lt;prop key="log4j.appender.logfile.layout.ConversionPattern"&gt;%d{yyyy-mm-dd HH:mm:ss} %-5p %-40c{3} - %m%n&lt;/prop&gt;
&lt;/props&gt;        
    </programlisting>
    
    <para>
    This is a typical configuration of a log file, but with the difference that 
    the properties and their values are stored in form of xml data. 
    </para>
    
    <sect3>
        <title>Change of the log file location</title>
        
        <para>
        You will see a line like this:
        </para>
        
        <programlisting>
    &lt;prop key="log4j.appender.logfile.File"&gt;PUT-HERE-A-CORRECT-FILENAME.LOG&lt;/prop&gt;    
        </programlisting>
        
        <para>
        You have to enter a correct filename there. If not, the filename
        <filename>PUT-HERE-A-CORRECT-FILENAME.LOG</filename> will be used, 
        storing the log information who-knows-where.
        </para>
    </sect3>
    
    <sect3>
        <title>Change the global detail of logging</title>
        
        <para>
        The detail of loggin is controlled via this line:
        </para>
        
        <programlisting>
            &lt;prop key="log4j.rootLogger"&gt;ERROR, logfile&lt;/prop&gt;
        </programlisting>
        
        <para>
        By default is configured in the <userinput>ERROR</userinput> level, 
        which is the most basic level of logging: it will only appear the 
        errors of the program. You can select other levels, from less 
        informational to most informational are: 
        </para>
        
        <itemizedlist>
        <listitem>
        <para>
        <emphasis>FATAL</emphasis>: only informs of the most severe errors
        </para>
        </listitem>
        <listitem>
        <para>
        <emphasis>ERROR</emphasis> (current level): only informs of errors during the 
        operation of the program
        </para>
        </listitem>
        <listitem>
        <para>
        <emphasis>WARN</emphasis>: more detailed, informs of warnings
        </para>
        </listitem>
        <listitem>
        <para>
        <emphasis>INFO</emphasis>
        </para>
        </listitem>
        <listitem>
        <para>
        <emphasis>DEBUG</emphasis>: very detailed. Inform almost of everything. 
        </para>
        </listitem>
        <listitem>
        <para>
        <emphasis>TRACE</emphasis>
        </para>
        </listitem>
        </itemizedlist>
        
        <tip>
        <para>
        It is suggested to change this level to <userinput>DEBUG</userinput>
        during tests, in order to detect errors or misconfigurations.
        </para>
        </tip>
    </sect3>
    
    <sect3 id="other-aproximations">
        <title>Other approximations</title>
        
        <para>
        Consult the 
        <link linkend="http://logging.apache.org/log4j/1.2/manual.html">
        documentation of log4j</link> in order to do things like
        email certain types of errors by creating an extra 
        appender of type 
        <link linkend="http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/net/SMTPAppender.html"><filename>SMTPAppender</filename></link>.
        </para>

    </sect3>
</sect2>



<sect2>
    <title>Remove the email filter and you are done</title>
    
    
    <para>
    When you are finished, remember the filter we put in
    <!-- here will appear "the section called "Avoid ..." -->
    <xref linkend="avoid-something"/>
    <!-- thanks to the magic of xref --> and remove it. 
    </para>
    
    <para>
    You know, open the file <filename>applicationContext.xml</filename>
    and locate the keyworkds <userinput>filter.contains1</userinput>
    and leave it blank.
    </para>
    
</sect2>


</chapter>
