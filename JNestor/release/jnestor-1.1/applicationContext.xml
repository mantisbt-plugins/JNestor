<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:security="http://www.springframework.org/schema/security"
	xmlns:lang="http://www.springframework.org/schema/lang"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-2.5.xsd
           http://www.springframework.org/schema/security 
           http://www.springframework.org/schema/security/spring-security-2.0.xsd
           http://www.springframework.org/schema/lang 
           http://www.springframework.org/schema/lang/spring-lang-2.5.xsd">

	<!-- scope=prototype: every call to getBean, Spring returns a new object 
		scope=singleton: every call to getbean, Spring returns the same object Only 
		for web: scope=request scope=session scope=globalSession (only for portlets) -->

    <!-- 

    Logger ....................................................................

    see http://logging.apache.org/log4j/1.2/manual.html for examples 
    of properties 
    
     -->
    
    <!-- 
    the "main" app class can't have a static class linked to 
    the object because it will be created BEFORE spring comes 
    into place. To solve that chicken and egg problem, we just
    crate this logger bean to be used by the main application
    and the rest of the application
     -->
    <bean id="logger" 
          class="org.apache.commons.logging.LogFactory"
          factory-method="getLog"
          scope="singleton">
        <constructor-arg value="com.supermanhamuerto.nestor"/>
    </bean>
    
    
    <!-- 
    
    
    Configuration of the log file..............................................
    
    
     -->
    <bean id="loggerConfigurator"
          class="com.supermanhamuerto.util.LoggerConfiguratorBean"
          scope="singleton">
        <property name="configuration">
             <props>
                <!-- 
                root logger configuration: it will log all errors (including trace messages)
                and them will be directed to the logfile appender
                 -->
                <prop key="log4j.rootLogger">INFO, console, logfile</prop>
                
                <prop key="log4j.appender.console">org.apache.log4j.ConsoleAppender</prop>
                <prop key="log4j.appender.console.layout">org.apache.log4j.PatternLayout</prop>
                <prop key="log4j.appender.console.layout.ConversionPattern">%d %-5p %-40c{3} - %m%n</prop>

                <prop key="log4j.appender.logfile">org.apache.log4j.FileAppender</prop>
                <prop key="log4j.appender.logfile.File">/home/rluna/tmp/nestor.log</prop>
                <prop key="log4j.appender.logfile.layout">org.apache.log4j.PatternLayout</prop>
                <prop key="log4j.appender.logfile.layout.ConversionPattern">%d{yyyy-mm-dd HH:mm:ss} %-5p %-40c{3} - %m%n</prop>
            </props>       
        </property>
    </bean> 

    <!-- 
    
    
    Configuration of mantis and email..............................................
    
    
     -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
          scope="singleton">
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="nullValue" value="null"/>
        <property name="properties">
            <props>
                <!-- 
                How to identify nestor own emails. For instance, 
                all the emails that nestor resends automatically
                will start with this text. Nestor will recognize 
                it (via the mailFilter bean) and avoid processing 
                these emails
                 -->
                <prop key="nestor.subject.id">Nestor&gt;</prop>
                <!-- 
                 Configuration to access mantis
                
                 Configure the access to mantis. In "url" you should have an url
                 like http://something/api/soap/mantisconnect.php. 
                 The project id is the project you want the issues to be added. 
                 The user must be an user with credentials to add to add issues 
                 to this project.                
                 -->               
                <prop key="mantis.url">http://localhost/mantis/api/soap/mantisconnect.php</prop>
                <prop key="mantis.projectid">1</prop>
                <prop key="mantis.user">nestor</prop>
                <prop key="mantis.password">*****</prop>
                <!-- 
                New issue header and new note header: this text will be 
                added at the beginning of a new issue and a new note. 
                Normally it will identify the sender of the message and 
                date sent. If in doubt, leave them unchanged. 
                 -->
                <prop key="mantis.newIssue.header">From: ##from \nSent: ##sent</prop>
                <prop key="mantis.newNote.header">From: ##from\nTo: ##to\nSent: ##sent</prop>
                <!-- 
				Stamp. In the subject of all the emails will appear something 
				like [ns2837] to identify the mantis iisue given. 
				If in doubt, leave it unchanged.              
                 -->
                 <prop key="mantis.issuestamp">[ns##issueid]</prop>
                 <!-- 
                 Mail configuration: smtp server, imap server (or pop server)
                 and things like that. If you don't know what I am speaking about, 
                 it's time to read something, google something and 
                 try to guess the correct values. There is little help at this 
                 point.
                  -->
                 <!-- 
                 Example of secure mail configuration
                  -->
                 <!-- 
                 <prop key="mail.usessl">true</prop>
                 <prop key="mail.user">jnestor.test</prop>
                 <prop key="mail.password">*****</prop>
                 <prop key="mail.store.host">imap.gmail.com</prop>
                 <prop key="mail.store.protocol">imap</prop>
                 <prop key="mail.imap.port">993</prop>
                 <prop key="mail.imap.socketFactory.port">993</prop>
                 <prop key="mail.imap.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
                 <prop key="mail.store.inbox">INBOX</prop>
                  
                 Thanks to http://magnuspo.wordpress.com/2008/05/30/javamail-secure-smtp/
                 
                 <prop key="mail.smtp.host">smtp.googlemail.com</prop>
                 <prop key="mail.smtp.port">465</prop>
                 <prop key="mail.smtp.auth">true</prop>
                 <prop key="mail.smtp.socketFactory.port">465</prop>
                 <prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
                 <prop key="mail.smtp.socketFactory.fallback">false</prop>
                  -->
                 <!-- 
                 Example of insecure mail configuration
                  -->
                 <prop key="mail.usessl">false</prop>
                 <prop key="mail.user">rluna</prop>
                 <prop key="mail.password">******</prop>
                 <prop key="mail.store.host">imap.arrakis.es</prop>
                 <prop key="mail.store.protocol">imap</prop>
                 <prop key="mail.imap.port">143</prop>
                 <prop key="mail.store.inbox">INBOX</prop>
                 <prop key="mail.smtp.host">smtp.arrakis.es</prop>
                 <prop key="mail.smtp.port">587</prop>
                 <!-- 
                 What will be the maximum attachment size in bytes?
                  -->
                 <prop key="maximumAttachmentSize">15000000</prop>
                 <!--
                 Mail filtering 
				 You can filter what emails must be proccesed by Nestor 
				 or what emails must be ignored: to do so, you have 
				 to create as many filters as you can. In the present 
				 moment you have to edit the "applicationContext.xml" 
				 to add more filters. However, I've entered one here 
				 to serve as an example
                  -->
                 <!-- LEAVE BLANK THIS FILTER TO PROCESS ALL EMAILS -->
                 <prop key="filter.contains1">.*9778.*</prop>
                 <!-- 
                 Filters for: autoresponders, not delivered mail 
                 and automatic responses for four languages: 
                 english, spanish, portuguese, turkish
                 You can leave them blank if they are useless in your 
                 particular case
                  -->
                 <!-- spanish -->
                 <prop key="filter.not.contains1">^entregado\:.*</prop>
                 <prop key="filter.not.contains2">^leer\:.*</prop>
                 <prop key="filter.not.contains3">^le.do\:.*</prop>
                 <prop key="filter.not.contains4">^no le.do\:.*</prop>
                 <prop key="filter.not.contains11">^respuesta autom.tica de fuera de la oficina\:.*</prop>
                 <prop key="filter.not.contains12">^respuesta de estoy ausente\:.*</prop>
                 <!-- portuguese, brazilian portuguese -->
                 <prop key="filter.not.contains5">^lida\: .*</prop>
                 <prop key="filter.not.contains10">^resposta autom.tica de ausencia tempor.ria.*</prop>
                 <!-- english -->
                 <prop key="filter.not.contains6">^read\: .*</prop>
                 <prop key="filter.not.contains7">^automatic reply\:.*</prop>
                 <prop key="filter.not.contains8">^auto\: % is out of the office.*</prop>
                 <prop key="filter.not.contains9">^out of office autoreply\: .*</prop>
                 <!-- mail server specific -->
                 <prop key="filter.not.contains15">^delayed mail (still being retried)</prop>
                 <prop key="filter.not.contains16">^undelivered mail returned to sender.*</prop>
                 <!-- turkish -->
                 <prop key="filter.not.contains13">^okundu\:.*</prop>
                 <prop key="filter.not.contains14">^teslim edildi\:.*</prop>
                 <!-- business specific -->
                 <prop key="filter.not.contains17">.*pruebas raul.*</prop>
                 <prop key="filter.not.contains18">^auditmap\: alarm.*</prop>
                 <prop key="filter.not.contains19">^auditmap\: alerta.*</prop>
                 <!-- 
                 Actions
                 
                 After an issue is created or a note is added, you can do 
                 more things with the email, or with the issue/note created. 
                 For this I've created the actions.
                  -->
                 <!-- 
                 Action Resender
                 Resends the original email to other address (or to the
                 same original mailbox)
                  -->
                 <prop key="resender.from">jnestor.test@gmail.com</prop>
                 <prop key="resender.to">jnestor.test@gmail.com</prop>
                 <prop key="resender.replyTo">##original_sender</prop>
                 <prop key="resender.body">Hello:\n\nI've entered this issue in Mantis with the id: ##issueid\n\nSincerely,\nNestor Moulinsart\n\n\n</prop>
                 <!-- 
                 Action archiver
                 Moves the original email to a folder
                  -->
                 <prop key="to.folder">perico</prop>
                 <!-- 
                 Action deleter
                 Deletes the original message (by the moment not active)
                  -->
            </props>
        </property>
    </bean>




    <!-- 
    Mantis bean
     -->
    <bean id="mantis" class="com.supermanhamuerto.nestor.Mantis" 
        init-method="init"
        scope="prototype">
        <property name="idf" ref="issueDataFactory"/>
        <property name="url" value="${mantis.url}"/>
        <property name="projectId" value="${mantis.projectid}"/>
        <property name="user" value="${mantis.user}"/>
        <property name="password" value="${mantis.password}"/>
    </bean>
    
    <!-- 
    Mail Session Factory
    -->
    <bean id="mailSessionFactory" class="com.supermanhamuerto.nestor.MailSessionFactory" 
            scope="singleton">
        <property name="mailAuthenticator" ref="mailSessionFactoryAuthenticator"/>
        <property name="mailConfig">
            <props>
            <prop key="debug">true</prop>
            <prop key="mail.usessl">${mail.usessl}</prop>
            
            <prop key="mail.user">${mail.user}</prop>
            <prop key="mail.password">${mail.password}</prop>
            <prop key="mail.store.host">${mail.store.host}</prop>
            <!-- mail.store.protocol default value: imap -->
            <prop key="mail.store.protocol">${mail.store.protocol}</prop>
            <prop key="mail.imap.port">${mail.imap.port}</prop>
            <!-- 
            <prop key="mail.imap.socketFactory.port">${mail.imap.socketFactory.port}</prop>
            <prop key="mail.imap.socketFactory.class">${mail.imap.socketFactory.class}</prop>
             -->
            <prop key="mail.smtp.host">${mail.smtp.host}</prop>
            <prop key="mail.smtp.port">${mail.smtp.port}</prop>
            <!-- 
            <prop key="mail.smtp.auth">${mail.smtp.auth}</prop>
            <prop key="mail.smtp.socketFactory.port">${mail.smtp.socketFactory.port}</prop>
            <prop key="mail.smtp.socketFactory.class">${mail.smtp.socketFactory.class}</prop>
            <prop key="mail.smtp.socketFactory.fallback">${mail.smtp.socketFactory.fallback}</prop>
             -->
            </props>
        </property>
    </bean>

    <bean id="mailSessionFactoryAuthenticator" 
            class="com.supermanhamuerto.nestor.MailSessionFactoryAuthenticator"
            scope="singleton">
        <property name="username" value="${mail.user}"/>
        <property name="password" value="${mail.password}"/>
    </bean>
    

    
    <!-- 
    MailReader bean
     -->
    <bean id="mailReader" class="com.supermanhamuerto.nestor.MailReader" 
        scope="prototype">
        <property name="mailSessionFactory" ref="mailSessionFactory"/>
        <property name="mailMessageFactory" ref="mailMessageFactory"/>
        <property name="mantis" ref="mantis"/>
        <property name="mailFilter" ref="mailFilter"/>
        <property name="mailProcessorsList">
            <list>
                <ref bean="mailProcessorMantis"/>
            </list>
        </property>
    </bean>

    <bean id="mailFilter" class="com.supermanhamuerto.nestor.MailFilter"
        scope="singleton">
        <!-- to filter by the subject, add regular expressions here -->
        <property name="subjectFilter">
            <props>
                <!-- 
                All the emails that begin with "nestor.subject.id", 
                which by default is the literal "Nestor>" come from 
                nestor, and should be ignored (they are forwardings 
                and things like that
                 -->
                <prop key="exp1">^${nestor.subject.id}</prop>
                <prop key="matching1">not-contains</prop>
                
                <!-- Filter used for debug -->
                <prop key="exp2">${filter.contains1}</prop>
                <prop key="matching2">contains</prop>

                <!-- common filters for delayed mail, automatic replies and etc. -->
                <prop key="exp3">^${filter.not.contains1}</prop>
                <prop key="matching3">not-contains</prop>
                <prop key="exp4">^${filter.not.contains2}</prop>
                <prop key="matching4">not-contains</prop>
                <prop key="exp5">^${filter.not.contains3}</prop>
                <prop key="matching5">not-contains</prop>
                <prop key="exp6">^${filter.not.contains4}</prop>
                <prop key="matching6">not-contains</prop>
                <prop key="exp7">^${filter.not.contains5}</prop>
                <prop key="matching7">not-contains</prop>
                <prop key="exp8">^${filter.not.contains6}</prop>
                <prop key="matching8">not-contains</prop>
                <prop key="exp9">^${filter.not.contains7}</prop>
                <prop key="matching9">not-contains</prop>
                <prop key="exp10">^${filter.not.contains8}</prop>
                <prop key="matching10">not-contains</prop>
                <prop key="exp11">^${filter.not.contains9}</prop>
                <prop key="matching11">not-contains</prop>
                <prop key="exp12">^${filter.not.contains10}</prop>
                <prop key="matching12">not-contains</prop>
                <prop key="exp13">^${filter.not.contains11}</prop>
                <prop key="matching13">not-contains</prop>
                <prop key="exp14">^${filter.not.contains12}</prop>
                <prop key="matching14">not-contains</prop>
                <prop key="exp15">^${filter.not.contains13}</prop>
                <prop key="matching15">not-contains</prop>
                <prop key="exp16">^${filter.not.contains14}</prop>
                <prop key="matching16">not-contains</prop>
                <prop key="exp17">^${filter.not.contains15}</prop>
                <prop key="matching17">not-contains</prop>
                <prop key="exp18">^${filter.not.contains16}</prop>
                <prop key="matching18">not-contains</prop>
                <prop key="exp19">^${filter.not.contains17}</prop>
                <prop key="matching19">not-contains</prop>
                <prop key="exp20">^${filter.not.contains18}</prop>
                <prop key="matching20">not-contains</prop>
                <prop key="exp21">^${filter.not.contains19}</prop>
                <prop key="matching21">not-contains</prop>
                
            </props>
        </property>
        <!-- BODY FILTERING DOESN'T WORK ACTUALLY -->
        <!-- to filter by the body, add regular expressions here -->
        <property name="bodyFilter">
            <props>
            </props>
        </property>
    </bean>

    <bean id="issueDataFactory" class="com.supermanhamuerto.nestor.IssueDataFactory"
        scope="singleton">
    </bean>
    
    <bean id="issueData" class="com.supermanhamuerto.nestor.IssueData"
        scope="prototype">
    </bean>

    <bean id="issueDataAttachment" class="com.supermanhamuerto.nestor.IssueDataAttachment"
        scope="prototype">
    </bean>

    <bean id="noteData" class="com.supermanhamuerto.nestor.NoteData"
        scope="prototype">
    </bean>

    <bean id="mailProcessorMantis" 
        class="com.supermanhamuerto.nestor.MailProcessorMantis"
        init-method="init"
        scope="prototype">
        <property name="issueDataFactory" ref="issueDataFactory"/>
        <property name="afterProcessActions">
            <list>
                <ref bean="forward-to-mailbox"/>
                <ref bean="archive-to-important"/>
            </list>
        </property>
        <property name="maximumAttachmentSize" value="${maximumAttachmentSize}"/>
        <property name="mantis" ref="mantis"/>
        <!-- 
          // template to add per issue
          // It can hold various values: 
          // ##from : from address
          // ##to: to address
          // ##sent : sent date 
         -->
        <property name="newIssueHeader" value="${mantis.newIssue.header}"/>
        <!-- 
          // template to add per existing 
          // issue. it can hold various values:
          // ##from : from address
          // ##to: to address
          // ##sent: sent date
         -->
        <property name="existingIssueHeader" value="${mantis.newNote.header}"/>
        <!-- 
         -->
        <property name="issueStamp" value="${mantis.issuestamp}"/>
    </bean>
    
    <bean id="mailMessageFactory" class="com.supermanhamuerto.nestor.MailMessageFactory">
    </bean>

    <bean id="mailMessage" class="com.supermanhamuerto.nestor.MailMessage"
        init-method="init"
        scope="prototype">
        <property name="mailChunkFactory" ref="mailChunkFactory"/>
    </bean>

    <bean id="mailChunkFactory" class="com.supermanhamuerto.nestor.MailChunkFactory"
          scope="singleton">
    </bean>

    <bean id="mailChunkHtml" class="com.supermanhamuerto.nestor.MailChunkHtml"
            scope="prototype">
    </bean>
    
    <bean id="mailChunkText" class="com.supermanhamuerto.nestor.MailChunkText"
            scope="prototype">
    </bean>
    
    <bean id="mailChunkAttachment" class="com.supermanhamuerto.nestor.MailChunkAttachment"
            scope="prototype">
        <property name="maximumAttachmentSize" value="${maximumAttachmentSize}"/>
    </bean>

    <!-- 
    
    Actions ...................................................
    
     -->
     <bean id="forward-to-mailbox"
           class="com.supermanhamuerto.nestor.actions.MantisProcessorActionResend"
           scope="prototype">
        <property name="mailSessionFactory" ref="mailSessionFactory"/>
        <property name="resendFrom" value="${resender.from}"/>
        <property name="resendTo" value="${resender.to}"/>
        <property name="replyTo" value="${resender.replyTo}"/>
        <property name="subjectStamp" value="${nestor.subject.id}"/>
        <property name="issueStamp" value="${mantis.issuestamp}"/>
        <property name="body" value="${resender.body}"/>
     </bean>
     
     <bean id="archive-to-important"
            class="com.supermanhamuerto.nestor.actions.MantisProcessorActionArchive"
            scope="prototype">
        <property name="mailSessionFactory" ref="mailSessionFactory"/>
        <property name="fromFolder" value="${mail.store.inbox}"/>
        <property name="toFolder" value="${to.folder}"/>
     </bean>

</beans>
